var l = Object.defineProperty; 
var u = (s, t, r) => t in s ? l(s, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : s[t] = r; var n = (s, t, r) => u(s, typeof t != "symbol" ? t + "" : t, r); (function () { const t = document.createElement("link").relList; if (t && t.supports && t.supports("modulepreload")) return; for (const e of document.querySelectorAll('link[rel="modulepreload"]')) o(e);
   new MutationObserver(e => { for (const i of e) if (i.type === "childList") for (const c of i.addedNodes) c.tagName === "LINK" && c.rel === "modulepreload" && o(c) }).observe(document, { childList: !0, subtree: !0 }); function r(e) { const i = {}; return e.integrity && (i.integrity = e.integrity), e.referrerPolicy && (i.referrerPolicy = e.referrerPolicy), e.crossOrigin === "use-credentials" ? i.credentials = "include" : e.crossOrigin === "anonymous" ? i.credentials = "omit" : i.credentials = "same-origin", i } function o(e) { if (e.ep) return; e.ep = !0; const i = r(e); fetch(e.href, i) } })(); class a { constructor(t, r, o, e) { n(this, "x"); n(this, "y"); n(this, "angle"); n(this, "opacity"); this.x = t, this.y = r, this.angle = o, this.opacity = e } get X() { return console.log("执行了getX方法"), this.x } get Y() { return this.y } get Angle() { return this.angle } get Opacity() { return this.opacity } } class d extends a { constructor(t, r, o, e) { super(t, r, o, e), this.x = t, this.y = r, this.angle = o, this.opacity = e, console.log(this.X, "执行了Rect"), console.log(this.X, this.y, this.angle, this.opacity) } } function f() { new d(10, 20, 30, .5) } document.querySelector("#app").innerHTML = `
  <div>
    <canvas id="graph"></canvas>
  </div>
`; f();
